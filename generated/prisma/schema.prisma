// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//=================== <**********> =======================
// User start
//=================== <**********> =======================

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  phone         String         @unique
  password      String
  name          String
  isVerified    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workerProfile WorkerProfile?
  clientProfile ClientProfile?
  adminProfile  AdminProfile?
  UserType      UserType
  active        Boolean        @default(false)
  fcm_token     Fcm_token?
}

// ##################### $ User Type Enum Start $ ##############

enum UserType {
  ADMIN
  WORKER
  CLIENT
}

// ##################### $ User Type Enum Start $ ##############

//=================== <**********> =======================
// Fcm_token Start
//=================== <**********> =======================

model Fcm_token {
  id     String  @id @default(uuid())
  token  String  @unique
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

//=================== <**********> =======================
// Fcm_token End
//=================== <**********> =======================

//=================== <**********> =======================
// User End
//=================== <**********> =======================

//=================== <**********> =======================
// Worker Profile Start
//=================== <**********> =======================

model WorkerProfile {
  id       String   @id @default(uuid())
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?  @unique
  taskType TaskType
  workerId String   @unique
  location Json
}

// ##################### $ Work Type Enum Start $ ##############

enum TaskType {
  SCHIMMEL_INSPECTIES_BEHANDELINGEN
  INSPECTIES_HUURWONINGEN_NAZORG
  VOCHTBEHEERSING
  STUCWERK
  SCHILDEREN_COATING
  NICOTINEVLEKKEN_VERWIJDERING
  REDDERSTEAM_NOODDIENST_24_7
}

// ##################### $ Work Type Enum End $ ##############

//=================== <**********> =======================
// Worker Profile End
//=================== <**********> =======================

//=================== <**********> =======================
// Client Profile End
//=================== <**********> =======================

model ClientProfile {
  id         String        @id @default(uuid())
  User       User?         @relation(fields: [userId], references: [id])
  userId     String?       @unique
  location   Json?
  userName   String?       @unique
  profilePic FileInstance?
}

//=================== <**********> =======================
// Client Profile End
//=================== <**********> =======================

//=================== <**********> =======================
// Admin Profile End
//=================== <**********> =======================

model AdminProfile {
  id     String  @id @default(uuid())
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

//=================== <**********> =======================
// Admin Profile End
//=================== <**********> =======================

//=================== <**********> =======================
// File Instance Start
//=================== <**********> =======================

model FileInstance {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  filename         String
  originalFilename String
  path             String
  url              String
  fileType         String
  mimeType         String
  size             Int
  ServiceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?         @unique
  ClientProfile    ClientProfile?  @relation(fields: [clientProfileId], references: [id])
  clientProfileId  String?         @unique
}

//=================== <**********> =======================
// File Instance End
//=================== <**********> =======================

//=================== <**********> =======================
// ServiceRequest Instance Start
//=================== <**********> =======================

model ServiceRequest {
  id                  String        @id @default(uuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String
  phoneNumber         String
  email               String
  city                String
  postalCode          String
  locationDescription String        @db.Text
  taskType            TaskType
  taskTypeId          Int
  problemDescription  String        @db.Text
  file                FileInstance?
  preferredTime       String?
  preferredDate       DateTime?
  status              RequestStatus @default(PENDING)
}

// ##################### $ RequestStatus Type Enum Start $ ##############

enum RequestStatus {
  PENDING
  APPROVED
  SCHEDULED
  COMPLETED
  CANCELLED
}

// ##################### $ RequestStatus Type Enum End $ ##############

//=================== <**********> =======================
// ServiceRequest Instance end
//=================== <**********> =======================âˆ‚
